name: Deploy latest

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Sets the run environment (default is ubuntu 22.04)'
        required: false
        type: string
        default: 'ubuntu-22.04'
    secrets:
      npm-token:
        required: false

jobs:
  deploy:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      packages: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Get Version
      id: getVersion
      run:  |
        VERSION=$(cat VERSION)
        echo "::set-output name=version::$VERSION"
    - name: Get tag
      id: getTag
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          let hasTag = 'false';
          try {
            const ref = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ steps.getVersion.outputs.version }}'
            });
            if (ref.status === 200) {
              hasTag = 'true';
            }
          } catch(err) {}
          return hasTag;
    - name: Check tag
      if: steps.getTag.outputs.result != 'false'
      run: |
        echo "::error title=Duplicate tag::Tag ${{ steps.getTag.outputs.result }} already in use, update VERSION file"
        exit 1
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Build image
      run: docker buildx build . --build-arg GH_NPM_TOKEN=${{ secrets.npm-token }} --file Dockerfile --tag ghcr.io/${{ github.repository }}:latest --tag ghcr.io/${{ github.repository }}:${{ steps.getVersion.outputs.version }} --label "runnumber=${GITHUB_RUN_ID}"
    - name: Push image
      run: docker push ghcr.io/${{ github.repository }} --all-tags
    - name: Create tag
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ steps.getVersion.outputs.version }}',
            sha: context.sha
          })
